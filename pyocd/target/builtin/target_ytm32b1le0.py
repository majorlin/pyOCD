# pyOCD debugger
# Copyright (c) 2022 Yuntu Microelectronics
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ...coresight.coresight_target import CoreSightTarget
from ...core.memory_map import (FlashRegion, RamRegion, MemoryMap)

MAIN_FLASH_ALGO = {
    'load_address' : 0x20000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xe7fdbe00,
    0x48784601, 0x4a776840, 0x29006050, 0x4876d005, 0x60104a76, 0x4a73b2c8, 0xbf006090, 0x68404871,
    0x40102280, 0xd0f92800, 0x6840486e, 0x4010220e, 0xd0012800, 0x47702001, 0xe7fc2000, 0x4604b570,
    0x4616460d, 0x6800486a, 0x4449496a, 0x48686008, 0x49696900, 0x60084449, 0x68404865, 0x44494967,
    0x48636008, 0x68003040, 0x44494965, 0x485d6008, 0x49646800, 0x60084449, 0x68404863, 0x44494963,
    0x20006008, 0x3140495a, 0xf3bf6008, 0x48588f4f, 0x21016900, 0x49564308, 0x485b6108, 0x21026880,
    0x28004008, 0x485ad10a, 0x60084957, 0x60084859, 0x68404608, 0x00400840, 0xe0046048, 0x49524856,
    0x48566008, 0x20016008, 0x60484949, 0x4848bf00, 0x280168c0, 0x2000d1fb, 0x60084945, 0x4844bf00,
    0x07806880, 0x28000f80, 0x484dd1f9, 0x6008493d, 0xf7ff2000, 0xbd70ff85, 0x48404601, 0x68004448,
    0x60504a3b, 0x483abf00, 0x4a3c68c0, 0x6812444a, 0xd1f84290, 0x44484837, 0x4a356800, 0xbf006010,
    0x68804833, 0x0f800780, 0x444a4a32, 0x42906812, 0x4831d1f6, 0x68004448, 0x61104a2d, 0x44484830,
    0x4a2b6800, 0x60103240, 0x4448482e, 0x4a256800, 0x482d6010, 0x22026880, 0x28004010, 0x482cd108,
    0x60104a29, 0x6010482b, 0x44484828, 0x60506800, 0x47702000, 0x482bb510, 0x60082100, 0xf7ff2012,
    0xbd10ff3f, 0x4604b510, 0x491f4823, 0x48236008, 0x48246008, 0x20106020, 0xff32f7ff, 0xb5f7bd10,
    0x4604b082, 0x9e04460d, 0x20044627, 0x95009001, 0x4819bf00, 0x60084914, 0x60084818, 0xc701ce01,
    0xf7ff2002, 0x2800ff1d, 0x2001d002, 0xbdf0b005, 0x98009901, 0x90001a40, 0x28009800, 0x2000dce9,
    0x0000e7f4, 0x40020000, 0xfd9573f5, 0x40020200, 0x40064000, 0x00000004, 0x00000008, 0x0000000c,
    0x00000010, 0x00000014, 0x40052000, 0x00000018, 0x0000b631, 0x0000c278, 0x0000a518, 0x0000d826,
    0x00180200, 0x12345678, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x20000041,
    'pc_unInit': 0x200000fd,
    'pc_program_page': 0x200001a3,
    'pc_erase_sector': 0x20000189,
    'pc_eraseAll': 0x20000179,

    'static_base' : 0x20000000 + 0x00000004 + 0x00000228,
    'begin_stack' : 0x20003450,
    'end_stack' : 0x20002450,
    'begin_data' : 0x20000000 + 0x1000,
    'page_size' : 0x100,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    # Enable double buffering
    'page_buffers' : [
        0x20000250,
        0x20000350
    ],
    'min_program_length' : 0x100,

    # Relative region addresses and sizes
    'ro_start': 0x4,
    'ro_size': 0x228,
    'rw_start': 0x22c,
    'rw_size': 0x1c,
    'zi_start': 0x248,
    'zi_size': 0x0,

    # Flash information
    'flash_start': 0x0,
    'flash_size': 0x20000,
    'sector_sizes': (
        (0x0, 0x200),
    )
}
DATA_FLASH_ALGO = {
    'load_address' : 0x20000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xe7fdbe00,
    0x487e4601, 0x4a7d6840, 0x29006050, 0x487cd005, 0x60104a7c, 0x4a79b2c8, 0xbf006090, 0x68404877,
    0x40102280, 0xd0f92800, 0x68404874, 0x4010220e, 0xd0012800, 0x47702001, 0xe7fc2000, 0x4604b570,
    0x4616460d, 0x68004870, 0x44494970, 0x486e6008, 0x496f6900, 0x60084449, 0x6840486b, 0x4449496d,
    0x48696008, 0x68003040, 0x4449496b, 0x48636008, 0x496a6800, 0x60084449, 0x68404869, 0x44494969,
    0x20006008, 0x31404960, 0xf3bf6008, 0x485e8f4f, 0x21016900, 0x495c4308, 0x48616108, 0x21026880,
    0x28004008, 0x4860d10a, 0x6008495d, 0x6008485f, 0x68404608, 0x00400840, 0xe0046048, 0x4958485c,
    0x485c6008, 0x20016008, 0x6048494f, 0x484ebf00, 0x280168c0, 0x2000d1fb, 0x6008494b, 0x484abf00,
    0x07806880, 0x28000f80, 0x4853d1f9, 0x60084943, 0xf7ff2000, 0xbd70ff85, 0x48464601, 0x68004448,
    0x60504a41, 0x4840bf00, 0x4a4268c0, 0x6812444a, 0xd1f84290, 0x4448483d, 0x4a3b6800, 0xbf006010,
    0x68804839, 0x0f800780, 0x444a4a38, 0x42906812, 0x4837d1f6, 0x68004448, 0x61104a33, 0x44484836,
    0x4a316800, 0x60103240, 0x44484834, 0x4a2b6800, 0x48336010, 0x22026880, 0x28004010, 0x4832d108,
    0x60104a2f, 0x60104831, 0x4448482e, 0x60506800, 0x47702000, 0x4604b510, 0x4929482d, 0x482d6008,
    0x482e6008, 0x20106020, 0xff3af7ff, 0xb510bd10, 0x20012400, 0xf7ff0700, 0x4604ffed, 0xf7ff4828,
    0x1904ffe9, 0xf7ff4827, 0x1904ffe5, 0xf7ff4826, 0x1904ffe1, 0xbd104620, 0xb082b5f7, 0x460d4604,
    0x46279e04, 0x90012004, 0xbf009500, 0x49144818, 0x48186008, 0xce016008, 0x2002c701, 0xff10f7ff,
    0xd0022800, 0xb0052001, 0x9901bdf0, 0x1a409800, 0x98009000, 0xdce92800, 0xe7f42000, 0x40020000,
    0xfd9573f5, 0x40020200, 0x40064000, 0x00000004, 0x00000008, 0x0000000c, 0x00000010, 0x00000014,
    0x40052000, 0x00000018, 0x0000b631, 0x0000c278, 0x0000a518, 0x0000d826, 0x00180200, 0x00001234,
    0x10000200, 0x10000400, 0x10000600, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x20000041,
    'pc_unInit': 0x200000fd,
    'pc_program_page': 0x200001bd,
    'pc_erase_sector': 0x20000179,
    'pc_eraseAll': 0x20000193,

    'static_base' : 0x20000000 + 0x00000004 + 0x0000024c,
    'begin_stack' : 0x20003370,
    'end_stack' : 0x20002370,
    'begin_data' : 0x20000000 + 0x1000,
    'page_size' : 0x80,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    # Enable double buffering
    'page_buffers' : [
        0x20000270,
        0x200002f0
    ],
    'min_program_length' : 0x80,

    # Relative region addresses and sizes
    'ro_start': 0x4,
    'ro_size': 0x24c,
    'rw_start': 0x250,
    'rw_size': 0x1c,
    'zi_start': 0x26c,
    'zi_size': 0x0,

    # Flash information
    'flash_start': 0x10000000,
    'flash_size': 0x800,
    'sector_sizes': (
        (0x0, 0x200),
    )
}

class YTM32B1LE0(CoreSightTarget):

    VENDOR = "Yuntu Microelectronics"

    MEMORY_MAP = MemoryMap(
        FlashRegion(    start=0x0000,      length=0x20000,      blocksize=0x200, is_boot_memory=True, algo=MAIN_FLASH_ALGO),
        FlashRegion(    start=0x10000000,  length=0x800,        blocksize=0x200, is_boot_memory=False, algo=DATA_FLASH_ALGO),
        RamRegion(      start=0x20000000,  length=0x2000)
        )

    def __init__(self, session):
        super().__init__(session, self.MEMORY_MAP)
