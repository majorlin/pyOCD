# pyOCD debugger
# Copyright (c) 2022 Yuntu Microelectronics
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ...coresight.coresight_target import CoreSightTarget
from ...core.memory_map import (FlashRegion, RamRegion, MemoryMap)

FLASH_ALGO = {
    'load_address' : 0x20000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xe7fdbe00,
    0x8f6ff3bf, 0x8f4ff3bf, 0x680048dd, 0x06092185, 0x49db4308, 0xbf006008, 0x680048d9, 0x07c00fc0,
    0x07c92101, 0xd0f74288, 0x8f6ff3bf, 0x8f4ff3bf, 0x46014770, 0x684048d3, 0x60504ad2, 0x4ad348d2,
    0xb2c86010, 0x60904acf, 0x48cebf00, 0x07c06840, 0x28000fc0, 0x48cbd105, 0x22086840, 0x28084010,
    0x48c8d1f3, 0x4aca6840, 0x28004010, 0x2001d001, 0x20004770, 0xb570e7fc, 0x460d4604, 0x48c54616,
    0x49c56800, 0x60084449, 0x690048c2, 0x444949c3, 0x48c06008, 0x49c26840, 0x60084449, 0x680048c1,
    0x444949c1, 0x48b76008, 0x49c06800, 0x60084449, 0x690048b4, 0x444949be, 0x48b26008, 0x49bd6940,
    0x60084449, 0x684048bc, 0x444949bc, 0x48ac6008, 0x49bb6800, 0x60084449, 0x49b22000, 0xf3bf6008,
    0x48ac8f4f, 0x21016900, 0x49aa4308, 0x48b26108, 0x21026880, 0x28004008, 0x48b2d10a, 0x600849ae,
    0x600848b1, 0x68404608, 0x00400840, 0xe0046048, 0x49a948ae, 0x48ae6008, 0x20036008, 0x6008499d,
    0x489cbf00, 0x07806880, 0x28030f80, 0x2001d1f9, 0x60484998, 0x4897bf00, 0x280168c0, 0xbf00d1fb,
    0x68804894, 0x40082104, 0xd1f92804, 0x49912000, 0xbf006008, 0x6880488f, 0x0f800780, 0xd1f92800,
    0x4988489c, 0x20036008, 0x489b6108, 0x20006148, 0x60084983, 0xff44f7ff, 0x4882bf00, 0x49816840,
    0xbf006048, 0x487fbf00, 0x21806840, 0x28004008, 0x2000d0f9, 0xb510bd70, 0x48814604, 0x68004448,
    0x6048497c, 0x487bbf00, 0x497d68c0, 0x68094449, 0xd1f84288, 0x44484878, 0x49766800, 0xbf006008,
    0x68804874, 0x0f800780, 0x44494973, 0x42886809, 0x4872d1f6, 0x68004448, 0x6108496e, 0x44484872,
    0x49706800, 0x48716008, 0x68004448, 0x60084965, 0x4448486f, 0x61086800, 0x4448486e, 0x61486800,
    0xfefef7ff, 0x4448486e, 0x495d6800, 0xf3bf6008, 0xf3bf8f6f, 0x48688f4f, 0x21026880, 0x28004008,
    0x4868d108, 0x60084964, 0x60084867, 0x44484863, 0x60486800, 0xbd102000, 0x4604b510, 0x68404851,
    0x60484950, 0x68004608, 0x43081489, 0x6008494d, 0x8f6ff3bf, 0x8f4ff3bf, 0x60204860, 0x4849bf00,
    0x21406840, 0x28004008, 0xf3bfd0f9, 0xf3bf8f6f, 0x48448f4f, 0x21016800, 0x43880309, 0x60084941,
    0xf7ff2011, 0xbd10fed6, 0x2400b510, 0xf7ff2000, 0x4604ffd3, 0x04802001, 0xffcef7ff, 0x46204304,
    0xb510bd10, 0x48494604, 0x60084943, 0x60084848, 0x68004834, 0x03092101, 0x49324308, 0xf3bf6008,
    0xf3bf8f6f, 0x48458f4f, 0xbf006020, 0x6840482d, 0x40082140, 0xd0f92800, 0x8f6ff3bf, 0x8f4ff3bf,
    0x68004828, 0x03092101, 0x49264388, 0x20106008, 0xfe9ff7ff, 0xb5f7bd10, 0x4604b082, 0x9e04460d,
    0x20044627, 0x95009001, 0x4830bf00, 0x6008492a, 0x6008482f, 0x6800481b, 0x03092101, 0x49194308,
    0xf3bf6008, 0xf3bf8f6f, 0x20008f4f, 0xce02e009, 0xbf00c702, 0x68494913, 0x40112240, 0xd0f92900,
    0x28011c40, 0xf3bfdbf3, 0xf3bf8f6f, 0x480d8f4f, 0x21016800, 0x43880309, 0x6008490a, 0xf7ff2003,
    0x2800fe68, 0x2001d002, 0xbdf0b005, 0x98009901, 0x90001a40, 0x28009800, 0x2000dcc7, 0x0000e7f4,
    0xe0080000, 0x40010000, 0xfd9573f5, 0x40010200, 0x0700001e, 0x4007c000, 0x00000004, 0x00000008,
    0x0000000c, 0x40076000, 0x00000010, 0x00000014, 0x00000018, 0x0000001c, 0x4006a000, 0x00000020,
    0x00000024, 0x0000b631, 0x0000c278, 0x0000a518, 0x0000d826, 0x000c0100, 0x00030003, 0x12345678,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x2000007b,
    'pc_unInit': 0x2000019b,
    'pc_program_page': 0x200002fb,
    'pc_erase_sector': 0x200002a7,
    'pc_eraseAll': 0x2000028d,

    'static_base' : 0x20000000 + 0x00000004 + 0x000003e0,
    'begin_stack' : 0x20001610 + 0x2000,
    'end_stack' : 0x20000610 + 0x2000,
    'begin_data' : 0x20000000 + 0x1000,
    'page_size' : 0x100,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    # Enable double buffering
    'page_buffers' : [
        0x20000410,
        0x20000510
    ],
    'min_program_length' : 0x100,

    # Relative region addresses and sizes
    'ro_start': 0x4,
    'ro_size': 0x3e0,
    'rw_start': 0x3e4,
    'rw_size': 0x28,
    'zi_start': 0x40c,
    'zi_size': 0x0,

    # Flash information
    'flash_start': 0x0,
    'flash_size': 0x80000,
    'sector_sizes': (
        (0x0, 0x200),
    )
}
DFLASH_ALGO = {
    'load_address' : 0x20000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xe7fdbe00,
    0x8f6ff3bf, 0x8f4ff3bf, 0x680048d7, 0x06092185, 0x49d54308, 0xbf006008, 0x680048d3, 0x07c00fc0,
    0x07c92101, 0xd0f74288, 0x8f6ff3bf, 0x8f4ff3bf, 0x46014770, 0x684048cd, 0x60504acc, 0x4acd48cc,
    0xb2c86010, 0x60904ac9, 0x48c8bf00, 0x07c06840, 0x28000fc0, 0x48c5d105, 0x22086840, 0x28084010,
    0x48c2d1f3, 0x4ac46840, 0x28004010, 0x2001d001, 0x20004770, 0xb570e7fc, 0x460d4604, 0x48bf4616,
    0x49bf6800, 0x60084449, 0x690048bc, 0x444949bd, 0x48ba6008, 0x49bc6840, 0x60084449, 0x680048bb,
    0x444949bb, 0x48b16008, 0x49ba6800, 0x60084449, 0x690048ae, 0x444949b8, 0x48ac6008, 0x49b76940,
    0x60084449, 0x684048b6, 0x444949b6, 0x48a66008, 0x49b56800, 0x60084449, 0x49ac2000, 0xf3bf6008,
    0x48a68f4f, 0x21016900, 0x49a44308, 0x48ac6108, 0x21026880, 0x28004008, 0x48acd10a, 0x600849a8,
    0x600848ab, 0x68404608, 0x00400840, 0xe0046048, 0x49a348a8, 0x48a86008, 0x20036008, 0x60084997,
    0x4896bf00, 0x07806880, 0x28030f80, 0x2001d1f9, 0x60484992, 0x4891bf00, 0x280168c0, 0xbf00d1fb,
    0x6880488e, 0x40082104, 0xd1f92804, 0x498b2000, 0xbf006008, 0x68804889, 0x0f800780, 0xd1f92800,
    0x49824896, 0x20036008, 0x48956108, 0x20006148, 0x6008497d, 0xff44f7ff, 0x487cbf00, 0x497b6840,
    0xbf006048, 0x4879bf00, 0x21806840, 0x28004008, 0x2000d0f9, 0xb510bd70, 0x487b4604, 0x68004448,
    0x60484976, 0x4875bf00, 0x497768c0, 0x68094449, 0xd1f84288, 0x44484872, 0x49706800, 0xbf006008,
    0x6880486e, 0x0f800780, 0x4449496d, 0x42886809, 0x486cd1f6, 0x68004448, 0x61084968, 0x4448486c,
    0x496a6800, 0x486b6008, 0x68004448, 0x6008495f, 0x44484869, 0x61086800, 0x44484868, 0x61486800,
    0xfefef7ff, 0x44484868, 0x49576800, 0xf3bf6008, 0xf3bf8f6f, 0x48628f4f, 0x21026880, 0x28004008,
    0x4862d108, 0x6008495e, 0x60084861, 0x4448485d, 0x60486800, 0xbd102000, 0x4604b510, 0x6840484b,
    0x6048494a, 0x68004608, 0x43081489, 0x60084947, 0x8f6ff3bf, 0x8f4ff3bf, 0x6020485a, 0x8f6ff3bf,
    0x8f4ff3bf, 0x68004841, 0x03092101, 0x493f4388, 0x20116008, 0xfeddf7ff, 0xb510bd10, 0x48522400,
    0xffdaf7ff, 0x46204604, 0xb510bd10, 0x48494604, 0x60084943, 0x60084848, 0x68004834, 0x03092101,
    0x49324308, 0xf3bf6008, 0xf3bf8f6f, 0x48458f4f, 0xbf006020, 0x6840482d, 0x40082140, 0xd0f92800,
    0x8f6ff3bf, 0x8f4ff3bf, 0x68004828, 0x03092101, 0x49264388, 0x20106008, 0xfeabf7ff, 0xb5f7bd10,
    0x4604b082, 0x9e04460d, 0x20044627, 0x95009001, 0x4830bf00, 0x6008492a, 0x6008482f, 0x6800481b,
    0x03092101, 0x49194308, 0xf3bf6008, 0xf3bf8f6f, 0x20008f4f, 0xce02e009, 0xbf00c702, 0x68494913,
    0x40112240, 0xd0f92900, 0x28011c40, 0xf3bfdbf3, 0xf3bf8f6f, 0x480d8f4f, 0x21016800, 0x43880309,
    0x6008490a, 0xf7ff2003, 0x2800fe74, 0x2001d002, 0xbdf0b005, 0x98009901, 0x90001a40, 0x28009800,
    0x2000dcc7, 0x0000e7f4, 0xe0080000, 0x40010000, 0xfd9573f5, 0x40010200, 0x0700001e, 0x4007c000,
    0x00000004, 0x00000008, 0x0000000c, 0x40076000, 0x00000010, 0x00000014, 0x00000018, 0x0000001c,
    0x4006a000, 0x00000020, 0x00000024, 0x0000b631, 0x0000c278, 0x0000a518, 0x0000d826, 0x000c0100,
    0x00030003, 0x12345678, 0x02001000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x2000007b,
    'pc_unInit': 0x2000019b,
    'pc_program_page': 0x200002e3,
    'pc_erase_sector': 0x2000028f,
    'pc_eraseAll': 0x2000027f,

    'static_base' : 0x20000000 + 0x00000004 + 0x000003cc,
    'begin_stack' : 0x20001600 + 0x2000,
    'end_stack' : 0x20000600 + 0x2000,
    'begin_data' : 0x20000000 + 0x1000,
    'page_size' : 0x100,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    # Enable double buffering
    'page_buffers' : [
        0x20000400,
        0x20000500
    ],
    'min_program_length' : 0x100,

    # Relative region addresses and sizes
    'ro_start': 0x4,
    'ro_size': 0x3cc,
    'rw_start': 0x3d0,
    'rw_size': 0x28,
    'zi_start': 0x3f8,
    'zi_size': 0x0,

    # Flash information
    'flash_start': 0x2001000,
    'flash_size': 0x10000,
    'sector_sizes': (
        (0x0, 0x200),
    )
}
class YTM32B1MD2(CoreSightTarget):

    VENDOR = "Yuntu Microelectronics"

    MEMORY_MAP = MemoryMap(
        FlashRegion(    start=0x00000000,  length=0x80000,      blocksize=0x200, is_boot_memory=True, algo=FLASH_ALGO),
        FlashRegion(    start=0x02000000,  length=0x10000,      blocksize=0x200, is_boot_memory=True, algo=DFLASH_ALGO),
        RamRegion(      start=0x20000000,  length=0x2000)
        )

    def __init__(self, session):
        super().__init__(session, self.MEMORY_MAP)
