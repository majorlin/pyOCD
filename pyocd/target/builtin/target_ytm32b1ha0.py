# pyOCD debugger
# Copyright (c) 2022 Yuntu Microelectronics
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ...coresight.coresight_target import CoreSightTarget
from ...core.memory_map import (FlashRegion, RamRegion, MemoryMap)

MAIN_FLASH_ALGO = {
    'load_address' : 0x20060000,

    # Flash algorithm as a hex string
    'instructions': [
    0xe7fdbe00,
    0x48d44601, 0x4ad36840, 0x48d36050, 0x60104ad3, 0x4ad0b2c8, 0xbf006090, 0x684048ce, 0x0fc007c0,
    0xd1052800, 0x684048cb, 0x40102208, 0xd1f32808, 0x684048c8, 0x40104aca, 0xd0012800, 0x47702001,
    0xe7fc2000, 0x4603b510, 0x680048c6, 0x444c4cc6, 0x48c46020, 0x4cc56900, 0x6020444c, 0x684048c1,
    0x444c4cc3, 0x48bf6020, 0x68003040, 0x444c4cc1, 0x48c16020, 0x4cc16940, 0x6020444c, 0x680048b5,
    0x444c4cbf, 0x48b36020, 0x4cbe6900, 0x6020444c, 0x694048b0, 0x444c4cbc, 0x48bc6020, 0x4cbc6840,
    0x6020444c, 0x694048b4, 0x04242401, 0x4cb243a0, 0xf3bf6160, 0x20008f4f, 0x34404caa, 0xf3bf6020,
    0x48a88f4f, 0x24016900, 0x4ca64320, 0x48af6120, 0x24026880, 0x28004020, 0x48aed10a, 0x60204cab,
    0x602048ad, 0x68404620, 0x00400840, 0xe0046060, 0x4ca648aa, 0x48aa6020, 0x20036020, 0x60204c99,
    0x4898bf00, 0x07806880, 0x28030f80, 0x2001d1f9, 0x60604c94, 0x4893bf00, 0x280168c0, 0xbf00d1fb,
    0x68804890, 0x40202404, 0xd1f92804, 0x4c8d2000, 0xbf006020, 0x6880488b, 0x0f800780, 0xd1f92800,
    0x4c844898, 0x48986020, 0x48986120, 0xbf006160, 0x68404620, 0xbf006060, 0x487ebf00, 0x24806840,
    0x28004020, 0x2000d0f9, 0x4601bd10, 0x44484880, 0x4a7c6800, 0xbf006050, 0x68c0487a, 0x444a4a7c,
    0x42906812, 0x4878d1f8, 0x68004448, 0x60104a75, 0x4876e004, 0x68004448, 0x61104a72, 0x68804871,
    0x0f800780, 0x444a4a70, 0x42906812, 0x4871d1f1, 0x68004448, 0x32404a6b, 0x48706010, 0x68004448,
    0x61504a6d, 0x4448486e, 0x4a626800, 0x486d6010, 0x68004448, 0x486c6110, 0x68004448, 0x486b6150,
    0x22026880, 0x28004010, 0x486ad108, 0x60104a67, 0x60104869, 0x44484866, 0x60506800, 0x47702000,
    0x4604b510, 0x68404853, 0x60484952, 0x68004608, 0x03092101, 0x494f4308, 0xf3bf6008, 0xf3bf8f6f,
    0x48638f4f, 0xf3bf6020, 0xf3bf8f6f, 0xbf008f4f, 0x68404848, 0x40082140, 0xd1f92840, 0x68004845,
    0x43880189, 0x60084943, 0xf7ff2011, 0xbd10fed9, 0x2400b510, 0x06402001, 0xffd2f7ff, 0x20214604,
    0xf7ff0500, 0x4304ffcd, 0xbd104620, 0x4604b510, 0x4946484a, 0x484a6008, 0x48366008, 0x49356840,
    0x46086048, 0x21016800, 0x43080309, 0x60084931, 0x8f6ff3bf, 0x8f4ff3bf, 0x60204845, 0x8f6ff3bf,
    0x8f4ff3bf, 0x482bbf00, 0x21406840, 0x28404008, 0x4828d1f9, 0x01896800, 0x49264388, 0x20106008,
    0xfe9ef7ff, 0xb5f7bd10, 0x4604b082, 0x9e04460d, 0x20204627, 0x95009001, 0x4830bf00, 0x6008492b,
    0x6008482f, 0x6840481b, 0x6048491a, 0x68004608, 0x03092101, 0x49174308, 0xf3bf6008, 0xf3bf8f6f,
    0x20008f4f, 0xce02e002, 0x1c40c702, 0xdbfa2808, 0x8f6ff3bf, 0x8f4ff3bf, 0x480ebf00, 0x21406840,
    0x28404008, 0x480bd1f9, 0x01896800, 0x49094388, 0x20026008, 0xfe64f7ff, 0xd0022800, 0xb0052001,
    0x9901bdf0, 0x1a409800, 0x98009000, 0xdcc42800, 0xe7f42000, 0x40040000, 0xfd9573f5, 0x40040200,
    0x1f00001e, 0x401f0000, 0x00000004, 0x00000008, 0x0000000c, 0x00000010, 0xe000e000, 0x00000014,
    0x00000018, 0x0000001c, 0x00000020, 0x401a8000, 0x00000024, 0x0000b631, 0x0000c278, 0x0000a518,
    0x0000d826, 0x00180200, 0x00070014, 0x07d09c40, 0x12345678, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x20060049,
    'pc_unInit': 0x2006016f,
    'pc_program_page': 0x200602cb,
    'pc_erase_sector': 0x20060271,
    'pc_eraseAll': 0x20060255,

    'static_base' : 0x20060000 + 0x00000004 + 0x000003b4,
    'begin_stack' : 0x20063be0,
    'end_stack' : 0x20062be0,
    'begin_data' : 0x20060000 + 0x1000,
    'page_size' : 0x400,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    # Enable double buffering
    'page_buffers' : [
        0x200603e0,
        0x200607e0
    ],
    'min_program_length' : 0x400,

    # Relative region addresses and sizes
    'ro_start': 0x4,
    'ro_size': 0x3b4,
    'rw_start': 0x3b8,
    'rw_size': 0x28,
    'zi_start': 0x3e0,
    'zi_size': 0x0,

    # Flash information
    'flash_start': 0x2000000,
    'flash_size': 0x200000,
    'sector_sizes': (
        (0x0, 0x800),
    )
}
DATA_FLASH_ALGO = {
    'load_address' : 0x20060000,

    # Flash algorithm as a hex string
    'instructions': [
    0xe7fdbe00,
    0x48d24601, 0x4ad16840, 0x48d16050, 0x60104ad1, 0x4aceb2c8, 0xbf006090, 0x684048cc, 0x0fc007c0,
    0xd1052800, 0x684048c9, 0x40102208, 0xd1f32808, 0x684048c6, 0x40104ac8, 0xd0012800, 0x47702001,
    0xe7fc2000, 0x4603b510, 0x680048c4, 0x444c4cc4, 0x48c26020, 0x4cc36900, 0x6020444c, 0x684048bf,
    0x444c4cc1, 0x48bd6020, 0x68003040, 0x444c4cbf, 0x48bf6020, 0x4cbf6940, 0x6020444c, 0x680048b3,
    0x444c4cbd, 0x48b16020, 0x4cbc6900, 0x6020444c, 0x694048ae, 0x444c4cba, 0x48ba6020, 0x4cba6840,
    0x6020444c, 0x694048b2, 0x04242401, 0x4cb043a0, 0xf3bf6160, 0x20008f4f, 0x34404ca8, 0xf3bf6020,
    0x48a68f4f, 0x24016900, 0x4ca44320, 0x48ad6120, 0x24026880, 0x28004020, 0x48acd10a, 0x60204ca9,
    0x602048ab, 0x68404620, 0x00400840, 0xe0046060, 0x4ca448a8, 0x48a86020, 0x20036020, 0x60204c97,
    0x4896bf00, 0x07806880, 0x28030f80, 0x2001d1f9, 0x60604c92, 0x4891bf00, 0x280168c0, 0xbf00d1fb,
    0x6880488e, 0x40202404, 0xd1f92804, 0x4c8b2000, 0xbf006020, 0x68804889, 0x0f800780, 0xd1f92800,
    0x4c824896, 0x48966020, 0x48966120, 0xbf006160, 0x68404620, 0xbf006060, 0x487cbf00, 0x24806840,
    0x28004020, 0x2000d0f9, 0x4601bd10, 0x4448487e, 0x4a7a6800, 0xbf006050, 0x68c04878, 0x444a4a7a,
    0x42906812, 0x4876d1f8, 0x68004448, 0x60104a73, 0x4874e004, 0x68004448, 0x61104a70, 0x6880486f,
    0x0f800780, 0x444a4a6e, 0x42906812, 0x486fd1f1, 0x68004448, 0x32404a69, 0x486e6010, 0x68004448,
    0x61504a6b, 0x4448486c, 0x4a606800, 0x486b6010, 0x68004448, 0x486a6110, 0x68004448, 0x48696150,
    0x22026880, 0x28004010, 0x4868d108, 0x60104a65, 0x60104867, 0x44484864, 0x60506800, 0x47702000,
    0x4604b510, 0x68404851, 0x60484950, 0x68004608, 0x03092101, 0x494d4308, 0xf3bf6008, 0xf3bf8f6f,
    0x48618f4f, 0xf3bf6020, 0xf3bf8f6f, 0xbf008f4f, 0x68404846, 0x40082140, 0xd1f92840, 0x68004843,
    0x43880189, 0x60084941, 0xf7ff2011, 0xbd10fed9, 0x2400b510, 0x06402003, 0xffd2f7ff, 0x46204604,
    0xb510bd10, 0x484b4604, 0x60084946, 0x6008484a, 0x68404836, 0x60484935, 0x68004608, 0x03092101,
    0x49324308, 0xf3bf6008, 0xf3bf8f6f, 0x48468f4f, 0xf3bf6020, 0xf3bf8f6f, 0xbf008f4f, 0x6840482b,
    0x40082140, 0xd1f92840, 0x68004828, 0x43880189, 0x60084926, 0xf7ff2010, 0xbd10fea3, 0xb082b5f7,
    0x460d4604, 0x46279e04, 0x90012008, 0xbf009500, 0x492c4830, 0x48306008, 0x481c6008, 0x491b6840,
    0x46086048, 0x21016800, 0x43080309, 0x60084917, 0x8f6ff3bf, 0x8f4ff3bf, 0xe0022000, 0xc702ce02,
    0x28021c40, 0xf3bfdbfa, 0xf3bf8f6f, 0xbf008f4f, 0x6840480e, 0x40082140, 0xd1f92840, 0x6800480b,
    0x43880189, 0x60084909, 0xf7ff2001, 0x2800fe69, 0x2001d002, 0xbdf0b005, 0x98009901, 0x90001a40,
    0x28009800, 0x2000dcc4, 0x0000e7f4, 0x40040000, 0xfd9573f5, 0x40040200, 0x1f00001e, 0x401f0000,
    0x00000004, 0x00000008, 0x0000000c, 0x00000010, 0xe000e000, 0x00000014, 0x00000018, 0x0000001c,
    0x00000020, 0x401a8000, 0x00000024, 0x0000b631, 0x0000c278, 0x0000a518, 0x0000d826, 0x00180200,
    0x00070014, 0x07d09c40, 0x12345678, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x20060049,
    'pc_unInit': 0x2006016f,
    'pc_program_page': 0x200602c1,
    'pc_erase_sector': 0x20060267,
    'pc_eraseAll': 0x20060255,

    'static_base' : 0x20060000 + 0x00000004 + 0x000003ac,
    'begin_stack' : 0x200635e0,
    'end_stack' : 0x200625e0,
    'begin_data' : 0x20060000 + 0x1000,
    'page_size' : 0x100,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    # Enable double buffering
    'page_buffers' : [
        0x200603e0,
        0x200604e0
    ],
    'min_program_length' : 0x100,

    # Relative region addresses and sizes
    'ro_start': 0x4,
    'ro_size': 0x3ac,
    'rw_start': 0x3b0,
    'rw_size': 0x28,
    'zi_start': 0x3d8,
    'zi_size': 0x0,

    # Flash information
    'flash_start': 0x6000000,
    'flash_size': 0x40000,
    'sector_sizes': (
        (0x0, 0x400),
    )
}

class YTM32B1HA0(CoreSightTarget):

    VENDOR = "Yuntu Microelectronics"

    MEMORY_MAP = MemoryMap(
        FlashRegion(    start=0x02000000,  length=0x200000,      blocksize=0x800, is_boot_memory=True, algo=MAIN_FLASH_ALGO),
        FlashRegion(    start=0x06000000,  length=0x040000,      blocksize=0x400, is_boot_memory=False, algo=DATA_FLASH_ALGO),
        RamRegion(      start=0x20060000,  length=0x10000)
        )

    def __init__(self, session):
        super().__init__(session, self.MEMORY_MAP)
