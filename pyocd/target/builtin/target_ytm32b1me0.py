# pyOCD debugger
# Copyright (c) 2022 Yuntu Microelectronics
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ...coresight.coresight_target import CoreSightTarget
from ...core.memory_map import (FlashRegion, RamRegion, MemoryMap)

MAIN_FLASH_ALGO = {
    'load_address' : 0x20000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xe7fdbe00,
    0x48a04601, 0x4a9f6840, 0x489f6050, 0x60104a9f, 0x4a9cb2c8, 0xbf006090, 0x6840489a, 0x0fc007c0,
    0xd1052800, 0x68404897, 0x40102208, 0xd1f32808, 0x68404894, 0x4010224e, 0xd0012800, 0x47702001,
    0xe7fc2000, 0x4603b510, 0x68004891, 0x444c4c91, 0x488f6020, 0x4c906900, 0x6020444c, 0x6840488c,
    0x444c4c8e, 0x488a6020, 0x68003040, 0x444c4c8c, 0x48846020, 0x4c8b6800, 0x6020444c, 0x69004881,
    0x444c4c89, 0x487f6020, 0x4c886940, 0x6020444c, 0x68404887, 0x444c4c87, 0x20006020, 0x34404c7c,
    0xf3bf6020, 0x487a8f4f, 0x24016900, 0x4c784320, 0x487f6120, 0x24026880, 0x28004020, 0x487ed10a,
    0x60204c7b, 0x6020487d, 0x68404620, 0x00400840, 0xe0046060, 0x4c76487a, 0x487a6020, 0x20036020,
    0x60204c6b, 0x486abf00, 0x07806880, 0x28030f80, 0x2001d1f9, 0x60604c66, 0x4865bf00, 0x078068c0,
    0x28010f80, 0xbf00d1f9, 0x68804861, 0x40202404, 0xd1f92804, 0x4c5e2000, 0xbf006020, 0x6880485c,
    0x0f800780, 0xd1f92800, 0x4c564867, 0x48676020, 0x48676120, 0xbf006160, 0x68404620, 0xbf006060,
    0x4850bf00, 0x24806840, 0x28004020, 0x2000d0f9, 0x4601bd10, 0x44484851, 0x4a4d6800, 0xbf006050,
    0x68c0484b, 0x444a4a4d, 0x42906812, 0x4849d1f8, 0x68004448, 0x60104a46, 0x4845bf00, 0x07806880,
    0x4a440f80, 0x6812444a, 0xd1f64290, 0x44484842, 0x4a3f6800, 0x48426110, 0x68004448, 0x32404a3c,
    0x48406010, 0x68004448, 0x60104a36, 0x4448483e, 0x61106800, 0x4448483d, 0x61506800, 0x6880483c,
    0x40102202, 0xd1082800, 0x4a39483b, 0x483b6010, 0x48386010, 0x68004448, 0x20006050, 0xb5104770,
    0x483c2400, 0x60082100, 0xf7ff2012, 0x4304ff09, 0x21014838, 0x600804c9, 0xf7ff2012, 0x4304ff01,
    0xbd104620, 0x4604b510, 0x4929482d, 0x482d6008, 0xbf006008, 0x491b2000, 0x204e6088, 0xbf006048,
    0x6020482c, 0xf7ff2010, 0xbd10feeb, 0xb082b5f7, 0x460f4606, 0x46359c04, 0x90012008, 0xbf009700,
    0x491b481f, 0x481f6008, 0xbf006008, 0x490d2000, 0x204e6088, 0xbf006048, 0xc501cc01, 0xc501cc01,
    0xf7ff2002, 0x2800fecd, 0x2001d002, 0xbdf0b005, 0x98009901, 0x90001a40, 0x28009800, 0x2000dce0,
    0x0000e7f4, 0x40010000, 0xfd9573f5, 0x40010200, 0x4007c000, 0x00000004, 0x00000008, 0x0000000c,
    0x00000010, 0x00000014, 0x00000018, 0x0000001c, 0x4006a000, 0x00000020, 0x0000b631, 0x0000c278,
    0x0000a518, 0x0000d826, 0x00300200, 0x00070014, 0x07d09c40, 0x12345678, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x20000049,
    'pc_unInit': 0x20000157,
    'pc_program_page': 0x20000231,
    'pc_erase_sector': 0x20000209,
    'pc_eraseAll': 0x200001e3,

    'static_base' : 0x20000000 + 0x00000004 + 0x000002d8,
    'begin_stack' : 0x20003b00,
    'end_stack' : 0x20001b00,
    'begin_data' : 0x20000000 + 0x1000,
    'page_size' : 0x400,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    # Enable double buffering
    'page_buffers' : [
        0x20000300,
        0x20000700
    ],
    'min_program_length' : 0x400,

    # Relative region addresses and sizes
    'ro_start': 0x4,
    'ro_size': 0x2d8,
    'rw_start': 0x2dc,
    'rw_size': 0x24,
    'zi_start': 0x300,
    'zi_size': 0x0,

    # Flash information
    'flash_start': 0x0,
    'flash_size': 0x100000,
    'sector_sizes': (
        (0x0, 0x800),
    )
}
DATA_FLASH_ALGO = {
    'load_address' : 0x20000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xe7fdbe00,
    0x489c4601, 0x4a9b6840, 0x489b6050, 0x60104a9b, 0x4a98b2c8, 0xbf006090, 0x68404896, 0x0fc007c0,
    0xd1052800, 0x68404893, 0x40102208, 0xd1f32808, 0x68404890, 0x4010224e, 0xd0012800, 0x47702001,
    0xe7fc2000, 0x4603b510, 0x6800488d, 0x444c4c8d, 0x488b6020, 0x4c8c6900, 0x6020444c, 0x68404888,
    0x444c4c8a, 0x48866020, 0x68003040, 0x444c4c88, 0x48806020, 0x4c876800, 0x6020444c, 0x6900487d,
    0x444c4c85, 0x487b6020, 0x4c846940, 0x6020444c, 0x68404883, 0x444c4c83, 0x20006020, 0x34404c78,
    0xf3bf6020, 0x48768f4f, 0x24016900, 0x4c744320, 0x487b6120, 0x24026880, 0x28004020, 0x487ad10a,
    0x60204c77, 0x60204879, 0x68404620, 0x00400840, 0xe0046060, 0x4c724876, 0x48766020, 0x20036020,
    0x60204c67, 0x4866bf00, 0x07806880, 0x28030f80, 0x2001d1f9, 0x60604c62, 0x4861bf00, 0x078068c0,
    0x28010f80, 0xbf00d1f9, 0x6880485d, 0x40202404, 0xd1f92804, 0x4c5a2000, 0xbf006020, 0x68804858,
    0x0f800780, 0xd1f92800, 0x4c524863, 0x48636020, 0x48636120, 0xbf006160, 0x68404620, 0xbf006060,
    0x484cbf00, 0x24806840, 0x28004020, 0x2000d0f9, 0x4601bd10, 0x4448484d, 0x4a496800, 0xbf006050,
    0x68c04847, 0x444a4a49, 0x42906812, 0x4845d1f8, 0x68004448, 0x60104a42, 0x4841bf00, 0x07806880,
    0x4a400f80, 0x6812444a, 0xd1f64290, 0x4448483e, 0x4a3b6800, 0x483e6110, 0x68004448, 0x32404a38,
    0x483c6010, 0x68004448, 0x60104a32, 0x4448483a, 0x61106800, 0x44484839, 0x61506800, 0x68804838,
    0x40102202, 0xd1082800, 0x4a354837, 0x48376010, 0x48346010, 0x68004448, 0x20006050, 0xb5104770,
    0x48382400, 0x05092101, 0x20126008, 0xff08f7ff, 0x46204304, 0xb510bd10, 0x482d4604, 0x60084928,
    0x6008482c, 0x2000bf00, 0x6088491a, 0x6048204e, 0x482cbf00, 0x20106020, 0xfef2f7ff, 0xb5f7bd10,
    0x4606b082, 0x9c04460f, 0x20084635, 0x97009001, 0x481fbf00, 0x6008491a, 0x6008481e, 0x2000bf00,
    0x6088490c, 0x6048204e, 0xcc01bf00, 0xcc01c501, 0x2002c501, 0xfed4f7ff, 0xd0022800, 0xb0052001,
    0x9901bdf0, 0x1a409800, 0x98009000, 0xdce02800, 0xe7f42000, 0x40010000, 0xfd9573f5, 0x40010200,
    0x4007c000, 0x00000004, 0x00000008, 0x0000000c, 0x00000010, 0x00000014, 0x00000018, 0x0000001c,
    0x4006a000, 0x00000020, 0x0000b631, 0x0000c278, 0x0000a518, 0x0000d826, 0x00300200, 0x00070014,
    0x07d09c40, 0x12345678, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x20000049,
    'pc_unInit': 0x20000157,
    'pc_program_page': 0x20000223,
    'pc_erase_sector': 0x200001fb,
    'pc_eraseAll': 0x200001e3,

    'static_base' : 0x20000000 + 0x00000004 + 0x000002c8,
    'begin_stack' : 0x200014f0 + 0x2000,
    'end_stack' : 0x200004f0 + 0x2000,
    'begin_data' : 0x20000000 + 0x1000,
    'page_size' : 0x100,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    # Enable double buffering
    'page_buffers' : [
        0x200002f0,
        0x200003f0
    ],
    'min_program_length' : 0x100,

    # Relative region addresses and sizes
    'ro_start': 0x4,
    'ro_size': 0x2c8,
    'rw_start': 0x2cc,
    'rw_size': 0x24,
    'zi_start': 0x2f0,
    'zi_size': 0x0,

    # Flash information
    'flash_start': 0x100000,
    'flash_size': 0x40000,
    'sector_sizes': (
        (0x0, 0x400),
    )
}

class YTM32B1ME0(CoreSightTarget):

    VENDOR = "Yuntu Microelectronics"

    MEMORY_MAP = MemoryMap(
        FlashRegion(    start=0x00000000,  length=0x100000,      blocksize=0x800, is_boot_memory=True, algo=MAIN_FLASH_ALGO),
        FlashRegion(    start=0x00100000,  length=0x040000,      blocksize=0x400, is_boot_memory=False, algo=DATA_FLASH_ALGO),
        RamRegion(      start=0x20000000,  length=0x10000)
        )

    def __init__(self, session):
        super().__init__(session, self.MEMORY_MAP)

    def create_init_sequence(self):
        # Insert init task to correct the ROM table base address value that incorrectly has the
        # P (preset) bit 0 cleared in hardware.

        def fixup_rom_base():
            self.aps[0].rom_addr = 0xE00FF000
            self.aps[0].has_rom_table = True

        seq = super().create_init_sequence()
        seq.wrap_task('discovery',
            lambda seq: seq.insert_after('create_aps', ('fixup_rom_base', fixup_rom_base))
            )
        return seq
